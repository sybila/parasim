apply plugin: "cpp"

model {
    buildTypes {
        release
    }

    components {
        sim(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDir "src"
                        lib library: 'jdk', linkage: 'api'
                    }
                }
            }
        }
    }

    repositories {
        libs(PrebuiltLibraries) {
            jdk {
                headers.srcDirs "${System.properties['java.home']}/../include",
               "${System.properties['java.home']}/include",
               "${System.properties['java.home']}/../include/win32",
               "${System.properties['java.home']}/include/win32",
               "${System.properties['java.home']}/../include/darwin",
               "${System.properties['java.home']}/../include/linux"
            }
        }
    }

    binaries {
        withType(SharedLibraryBinarySpec) {
            if (toolChain in Gcc) {
                cppCompiler.args "-march=native", "-std=c++14", "-Wall", "-Wextra", "-pedantic"
                linker.args "-lm", "-flto"
            }
            if (toolChain in VisualCpp) {
                cppCompiler.define "DLL_EXPORT"
                cppCompiler.args "/O2", "/std:c++14", "/EHsc"
            }
        }
    }

    binaries {
        withType(StaticLibraryBinarySpec) {
            buildable=false
        }
    }
}
